"""
Generate Swagger from CRUS

Copyright 2018, Cray Inc. All rights reserved.
"""
import os
import tempfile
import sys
import shutil

from yaml import safe_load

PREAMBLE = """
# This file is automatically generated, please see README.md for more
# details.
"""[1:]


# Set CRUS_CONFIGURATION to "testing" before pulling in tms_app so
# that the configuration gets set up correctly for a stand-alone
# run of TMS code.
os.environ['CRUS_CONFIGURATION'] = "testing"
# pylint: disable=wrong-import-position
from crus.app import SPEC


# A mechanism for comparing swagger.yaml files, used to decide whether
# the swagger has actually changed or just looks like it changed.
# This will reduce the number of spurious swagger.yaml updates due to
# non-deterministic ordering of data.
def same_dict(dict1, dict2):
    """Compare two dictionaries and return an indication of whether they
    have the same contents or not.

    """
    # Make sure the key space of both dicts is the same
    for k in dict1:
        if k not in dict2:
            return False  # pragma no cover
    for k in dict2:
        if k not in dict1:
            return False
    # Okay, the keys are all the same, we can use dict1 to drive from
    # here.
    for k in dict1:
        if not same(dict1[k], dict2[k]):
            return False  # pragma no cover
    return True


def same_list(list1, list2):
    """Compare two lists and return an indication of whether they are the
    same or not.

    """
    if len(list1) != len(list2):
        return False  # pragma no cover
    for index, item in enumerate(list1):
        if not same(item, list2[index]):
            return False  # pragma no cover
    return True


def same(blob1, blob2):
    """Perform a dictionary order independent comparison of two blobs
    containing dictionaries, lists and native typed objects like I
    would find in a swagger spec.

    """
    if not isinstance(blob1, type(blob2)):
        return False
    if isinstance(blob1, dict):
        if not same_dict(blob1, blob2):
            return False
    elif isinstance(blob1, list):
        if not same_list(blob1, blob2):
            return False  # pragma no cover
    elif blob1 != blob2:
        return False  # pragma no cover
    return True


def usage(error=""):
    """ Print a usage message and exit with non-zero (failure) status.
    """
    message = """%s
Usage: python gen_swagger.py out-file

Where:
    'out-file' is the output file name.
""" % error
    print(message, file=sys.stderr)
    return 1


def main(argv):
    """Main entry point for stand-alone execution.

    Command line argument is a single file name to contain the result.
    If the file already exists, the resulting swagger is checked to
    see if it has actually or only apparently changed.  If the changes
    are only apparent, then the original file is left unchanged.

    """
    # Handle arguments
    if len(argv) > 2:
        return usage("Too many arguments")
    if len(argv) < 2:
        return usage("Too few arguments")

    # Set up to write to a temporary file so we don't obliterate the
    # original if it is unchanged or we fail somewhere.
    outname = argv[1]
    old_swagger = {}
    if os.path.exists(outname):
        # There is a version of the file we are planning to change
        # already there, so capture its contents as old_swagger
        # for future comparison.
        with open(outname, 'r') as infile:
            old_swagger = safe_load(infile)

    # Get the generated spec and dump it to a temporary file.  If the
    # result differs from whatever we already had, then copy the
    # temporary file over the output file.
    try:
        with tempfile.NamedTemporaryFile(mode='w+') as temp:
            temp.write(PREAMBLE)
            temp.write(SPEC.to_yaml())
            # Just to be safe, since we are going to use copy() below
            temp.flush()
            temp.seek(0)
            new_swagger = safe_load(temp)
            if not same(old_swagger, new_swagger):
                # The swagger has changed
                shutil.copy(temp.name, outname)
    except OSError as exc:
        print(
            "attempt to create swagger file '%s' failed - %s" %
            (outname, str(exc)),
            file=sys.stderr
        )
        return 1
    return 0


if __name__ == '__main__':  # pragma no unit test
    sys.exit(main(sys.argv))
